// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String?
  name          String?
  googleId      String?  @unique
  profileImage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  conversations Conversation[]
  quizAttempts  UserQuizAttempt[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(uuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  role           String   // 'user' or 'assistant'
  content        String   @db.Text
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Quiz {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  timeLimit   Int      // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  questions    Question[]
  quizAttempts UserQuizAttempt[]

  @@map("quizzes")
}

model Question {
  id        String   @id @default(uuid())
  quizId    String
  question  String   @db.Text
  optionA   String
  optionB   String
  optionC   String
  optionD   String
  correctAnswer String // 'A', 'B', 'C', or 'D'
  order     Int
  createdAt DateTime @default(now())

  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("questions")
}

model UserQuizAttempt {
  id            String   @id @default(uuid())
  userId        String
  quizId        String
  score         Int
  totalQuestions Int
  correctAnswers Int
  wrongAnswers   Int
  timeTaken     Int      // in seconds
  startedAt     DateTime
  completedAt   DateTime
  createdAt     DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("user_quiz_attempts")
}

model UserAnswer {
  id              String   @id @default(uuid())
  attemptId       String
  questionId      String
  selectedAnswer  String   // 'A', 'B', 'C', or 'D'
  isCorrect       Boolean
  createdAt       DateTime @default(now())

  attempt  UserQuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}
